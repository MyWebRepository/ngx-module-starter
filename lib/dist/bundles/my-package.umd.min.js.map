{"version":3,"sources":["ng://my-package/module-one/src/one.component.ts","ng://my-package/module-one/src/one.module.ts","ng://my-package/module-two/src/two.component.ts","ng://my-package/module-two/src/two.module.ts","ng://my-package/module-three/src/services/data.service.ts","ng://my-package/module-three/src/components/three.component.ts","ng://my-package/module-three/src/pipes/square.pipe.ts","ng://my-package/module-three/src/three.module.ts"],"names":["EventEmitter","Component","args","selector","template","styles","Output","OneModule","NgModule","imports","CommonModule","declarations","OneComponent","exports","TwoComponent","TwoModule","DataService","prototype","getData","Observable","of","Injectable","ThreeComponent","dataService","this","ngOnInit","_this","subscribe","result","value","SquarePipe","transform","val","parseFloat","String","Math","pow","Pipe","name","providers"],"mappings":"+YAagD,IAAIA,EAAAA,wCARnDC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,iBACVC,SAAU,wEAGVC,OAAQ,CAAC,gDAGRC,EAAAA,eCbHC,EAAA,oDAICC,EAAAA,SAAQN,KAAA,CAAC,CACRO,QAAS,CAACC,EAAAA,cACVC,aAAc,CAACC,GACfC,QAAS,CAACD,SAPZ,GCAAE,EAAA,oDAECb,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,iBACVC,SAAU,+BACVC,OAAQ,CAAC,0BALX,GCAAU,EAAA,oDAICP,EAAAA,SAAQN,KAAA,CAAC,CACRO,QAAS,CAACC,EAAAA,cACVC,aAAc,CAACG,GACfD,QAAS,CAACC,SAPZ,qCCWSE,EAAAC,UAAAC,mBACL,OAAOC,EAAAA,WAAWC,GAAG,yBANxBC,EAAAA,+BCWC,SAAAC,EAAoBC,GAAAC,KAAAD,YAAAA,SAEpBD,EAAAL,UAAAQ,SAAA,WAAA,IAAAC,EAAAF,KACEA,KAAKD,YAAYL,UAAUS,UAAU,SAACC,GACpCF,EAAKG,MAAQD,yBAdlB3B,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,iBACVC,SAAU,mGAGVC,OAAQ,gDAVDW,4CCKPc,EAAAb,UAAAc,UAAA,SAAUF,GACR,IAAMG,EAAcC,WAAWC,OAAOL,IAEtC,OAAOM,KAAKC,IAAIJ,EAAK,wBALxBK,EAAAA,KAAInC,KAAA,CAAC,CAACoC,KAAM,wECIZ9B,EAAAA,SAAQN,KAAA,CAAC,CACRO,QAAS,CAACC,EAAAA,cACVC,aAAc,CAACW,EAAgBQ,GAC/BjB,QAAS,CAACS,EAAgBQ,GAC1BS,UAAW,CAACvB","sourcesContent":["import { Component, EventEmitter, Output } from '@angular/core';\n\n/**\n * The is a sample component of common module.\n */\n@Component({\n  selector: 'my-component-1',\n  template: `\n    <button (click)=\"buttonClicked$.emit()\">Click This</button>\n  `,\n  styles: ['']\n})\nexport class OneComponent {\n  @Output() buttonClicked$: EventEmitter<any> = new EventEmitter();\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OneComponent } from './one.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OneComponent],\n  exports: [OneComponent]\n})\nexport class OneModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-component-2',\n  template: '<p>Module Two Component!</p>',\n  styles: ['p {color: blue;}']\n})\nexport class TwoComponent {\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TwoComponent } from './two.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [TwoComponent],\n  exports: [TwoComponent]\n})\nexport class TwoModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n/**\n * The service DataService provides a method returning a number\n */\n@Injectable()\nexport class DataService {\n  /**\n   * The method getData returns a generic observable\n   */\n  public getData(): Observable<number> {\n    return Observable.of(15);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\nimport { DataService } from '../services';\n\n/**\n * The ThreeComponent renders a value and its square.\n */\n@Component({\n  selector: 'my-component-3',\n  template: `<div>\n  <div id=\"data-container\">Value: {{value}} -- Squared: {{value | square}} </div>\n</div>`,\n  styles: []\n})\nexport class ThreeComponent implements OnInit {\n  public value: number;\n\n  constructor(private dataService: DataService) {}\n\n  ngOnInit(): void {\n    this.dataService.getData().subscribe((result: number) => {\n      this.value = result;\n    });\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * The SquarePipe converts a number to its square\n */\n@Pipe({name: 'square'})\nexport class SquarePipe implements PipeTransform {\n  transform(value: number): number {\n    const val: number = parseFloat(String(value));\n\n    return Math.pow(val, 2);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThreeComponent } from './components';\nimport { DataService } from './services';\nimport { SquarePipe} from './pipes';\n\n/**\n * The module registers component, service and pipe created in the module\n */\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ThreeComponent, SquarePipe],\n  exports: [ThreeComponent, SquarePipe],\n  providers: [DataService]\n})\nexport class ThreeModule {}\n"]}